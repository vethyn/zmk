/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

#define COLEMAK 0
#define NAV 1
#define NUM 2
#define SYM 3
#define FUN 4

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <280>;
    quick_tap_ms = <75>;
};
&mmv {
   time-to-max-speed-ms = <680>;
   acceleration-exponent=<2>;
};
/ { 
   behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
	td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
		&kp Q       &kp W       &kp F         &kp P        	   &kp B      		&kp J     &kp L         &kp U         		&kp Y       	&kp BKSP
		&kp A  	    &kp R       &hm LALT S    &hm LGUI T   	   &kp G      		&kp M  	  &hm RGUI N    &hm RALT E    		&mt LALT I  	&kp O
		&kp Z       &kp X       &kp C         &kp V        	   &kp D      		&kp K     &kp H         &td MINUS COMMA		&td EXCL DOT	&td UNDERSCORE SLASH
						      &mt LC(LS(LALT)) SPC &sk LSHIFT  		&sk RCTRL &to 1 
            >;
        };

        nav_layer {
            bindings = <
		&kp ESC     &kp ATSN    &td LC(LG(LS(N4))) LS(N3) &kp DLLR    	    &kp PRCNT		&kp CARET  &kp LS(COMMA)   &kp LS(DOT) 	&kp SEMI    &kp BKSP 
		&kp TAB     &kp EQUAL   &kp LA(RBKT)              &kp LA(LS(RBKT))  &kp SQT 		&kp BSLH   &kp LBRC  	   &kp RBRC 	&kp PIPE    &kp ENTER
		&kp TILDE   &kp LA(N3) 	&kp LA(LBKT) 		  &kp LA(LS(LBKT))  &kp DQT 		&kp LBKT   &kp LPRN 	   &kp RPRN 	&kp RBKT    &to 3 
					    			  &to 0  	    &sk LSHIFT  	&sk RALT   &to 2
            >;
        };

        num_layer {
            bindings = <
		&kp ESC  &kp C_PP   &kp C_PREV    &kp C_NEXT    &kp LS(MINUS)    	&kp MINUS   &kp N7  &kp N8  &kp N9   &trans
		&kp TAB  &trans     &kp C_VOL_DN  &kp C_VOL_UP  &kp LS(EQUAL) 		&kp EQUAL   &kp N4  &kp N5  &kp N6   &kp ENTER
		&to 4    &kp AMPS   &kp SLASH     &kp STAR      &kp DOT    		&kp N0      &kp N1  &kp N2  &kp N3   &trans 
					  	  &to 0 	&sk LGUI  		&sk RALT    &to 2 
            >;
        };

        sym_layer {
            bindings = <
		&trans  	    &mwh SCROLL_LEFT    &mmv MOVE_UP    &mwh SCROLL_RIGHT   &kp NUM_5 		&kp LG(LBKT)   &kp LC(LS(TAB))   &kp RC(TAB)   &kp LG(RBKT) &trans
		&kp F1  	    &mmv MOVE_LEFT 	&mmv MOVE_DOWN  &mmv MOVE_RIGHT     &kp DEL  		&kp LEFT       &kp DOWN          &kp UP        &kp RIGHT    &kp ENTER 
		&td LG(GRAVE) GRAVE &mkp RCLK  		&mwh SCROLL_UP  &mwh SCROLL_DOWN    &trans   		&mkp LCLK      &kp PG_DN         &kp K_VOL_DN  &trans       &trans   
					 				&to 0 		    &trans  		&sk RALT       &to 1
            >;
        };

        fun_layer {
            bindings = <
		&bt BT_CLR     &bt BT_SEL 2  &trans    &trans       &bootloader 	&bootloader &trans  &trans  &trans &trans 
		&bt BT_SEL 0   &bt BT_SEL 3  &trans    &trans       &trans 		&trans 	    &trans  	&trans  &trans &trans 
		&bt BT_SEL 1   &trans 	     &trans    &trans       &trans   		&trans      &trans  	&trans  &trans &trans   
					 	       &to 0        &trans  		&trans &to 1 
            >;
        };
    };
};
