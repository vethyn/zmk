/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define COLEMAK 0
#define NAV 1
#define FUN 2
#define SYM 3
#define NUM 4

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
    retro-tap;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_caps_word {
            timeout-ms = <100>;
            key-positions = <20 29>;
            bindings = <&caps_word>;
        };

        combo_esc {
            timeout-ms = <100>;
            key-positions = <13 16>;
            bindings = <&kp ESC>;
        };

        combo_minus {
            timeout-ms = <80>;
            key-positions = <3 6>;
            bindings = <&kp MINUS>;
        };

        combo_under {
            timeout-ms = <80>;
            key-positions = <23 26>;
            bindings = <&kp UNDER>;
        };

        combo_ble {
            timeout-ms = <20>;
            key-positions = <0 1>;
            bindings = <&out OUT_BLE>;
        };

        go_to_layer_1 {
            bindings = <&to 2>;
            key-positions = <30 33>;
        };

        go_to_layer_2 {
            bindings = <&to 1>;
            key-positions = <31 32>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
      &kp Q       &kp W         &kp F        &kp P                    &kp G                    &kp J          &kp L         &kp U       &kp Y  &kp SEMICOLON
 &mt LGUI A  &mt LALT R  &mt LSHIFT S  &mt LCTRL T  &mt LG(LA(LS(LCTRL))) D  &mt RG(RA(RS(RCTRL))) H    &mt RCTRL N  &mt RSHIFT E  &mt RALT I     &mt RGUI O
      &kp Z       &kp X         &kp C        &kp V                    &kp B                    &kp K          &kp M     &kp COMMA     &kp DOT       &kp FSLH
                                           &kp TAB                &kp SPACE               &kp RETURN  &kp BACKSPACE
            >;
        };

        nav_layer {
            bindings = <
 &trans  &trans  &trans  &bootloader  &reset    &kp LBRC       &kp RBRC  &kp LPAR  &kp RPAR  &kp COLON
 &trans  &trans  &trans       &trans  &trans       &kp A       &kp LEFT  &kp DOWN    &kp UP  &kp RIGHT
 &trans  &trans  &trans       &trans  &trans    &kp LBKT       &kp RBKT    &kp LT    &kp GT   &kp BSLH
                               &to 3   &to 0  &kp DELETE  &kp BACKSPACE
            >;
        };

        sym_layer {
            bindings = <
   &kp SQT  &kp GRAVE   &kp STAR      &kp AMPS  &kp MINUS  &reset  &bootloader  &trans  &trans  &trans
   &kp DQT  &kp CARET  &kp PRCNT      &kp DLLR   &kp PLUS  &trans       &trans  &trans  &trans  &trans
 &kp TILDE   &kp HASH     &kp AT      &kp EXCL   &kp PIPE  &trans       &trans  &trans  &trans  &trans
                                  &kp QUESTION  &kp EQUAL   &to 0       &tog 3
            >;
        };

        num_layer {
            bindings = <
   &bt BT_CLR  &bt BT_SEL 2  &trans  &trans  &trans  &trans  &kp N7  &kp N8  &kp N9  &trans
 &bt BT_SEL 0        &trans  &trans  &trans  &trans  &trans  &kp N4  &kp N5  &kp N6  &trans
 &bt BT_SEL 1        &trans  &trans  &trans  &trans  &kp N0  &kp N1  &kp N2  &kp N3  &trans
                                     &trans  &trans   &to 0  &trans
            >;
        };
    };
};
