/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define COLEMAK 0
#define NAV 1
#define SYM 2
#define NUM 3

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
    retro-tap;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_caps_word {
            timeout-ms = <100>;
            key-positions = <20 29>;
            bindings = <&caps_word>;
        };

        combo_esc {
            timeout-ms = <100>;
            key-positions = <13 16>;
            bindings = <&kp ESC>;
        };

        combo_minus {
            timeout-ms = <80>;
            key-positions = <3 6>;
            bindings = <&kp MINUS>;
        };

        combo_under {
            timeout-ms = <80>;
            key-positions = <23 26>;
            bindings = <&kp UNDER>;
        };

        combo_ble {
            timeout-ms = <20>;
            key-positions = <0 1>;
            bindings = <&out OUT_BLE>;
        };

        go_to_layer_2 {
            bindings = <&to 2>;
            key-positions = <30 33>;
            layers = <0 3 1>;
        };

        go_to_layer_0_from_2 {
            bindings = <&to 0>;
            key-positions = <30 33>;
            layers = <2>;
        };

        go_to_layer_1 {
            bindings = <&to 1>;
            key-positions = <31 32>;
            layers = <0 2 3>;
        };

        go_to_layer_0_from_1 {
            bindings = <&to 0>;
            key-positions = <31 32>;
            layers = <1>;
        };

        go_to_layer_3 {
            bindings = <&to 3>;
            key-positions = <8 9>;
            layers = <0 1 2>;
        };

        go_to_layer_0_from_3 {
            bindings = <&to 0>;
            key-positions = <9 8>;
            layers = <3>;
        };

        vim_end_of_line {
            bindings = <&kp DOLLAR>;
            key-positions = <10 19>;
        };

        vim_start_of_line {
            bindings = <&kp NUMBER_0>;
            key-positions = <14 15>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <31 29>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
      &kp Q       &kp W         &kp F        &kp P                        &kp B                         &kp J          &kp L         &kp U       &kp Y  &kp SEMICOLON
 &mt LGUI A  &mt LALT R  &mt LSHIFT S  &mt LCTRL T                        &kp G                         &kp M    &mt RCTRL N  &mt RSHIFT E  &mt RALT I     &mt RGUI O
      &kp Z       &kp X         &kp C        &kp D                        &kp V                         &kp K          &kp H     &kp COMMA     &kp DOT    &key_repeat
                                           &kp TAB  &mt LG(LA(LS(LCTRL))) SPACE  &mt LG(LA(LS(LCTRL))) RETURN  &kp BACKSPACE
            >;
        };

        nav_layer {
            bindings = <
     &trans           &kp NUMBER_9             &kp NUMBER_8               &kp NUMBER_7               &kp J       &kp LBRC    &kp RBRC  &kp LPAR  &kp RPAR  &kp COLON
 &kp LS(G)  &mt LEFT_ALT NUMBER_6  &mt LEFT_SHIFT NUMBER_5  &mt LEFT_CONTROL NUMBER_4               &kp K  &kp SEMICOLON    &kp LEFT  &kp DOWN    &kp UP  &kp RIGHT
      &kp P           &kp NUMBER_3             &kp NUMBER_2               &kp NUMBER_1        &kp NUMBER_0       &kp LBKT    &kp RBKT    &kp LT    &kp GT   &kp BSLH
                                                                    &mt LG(LSHIFT) TAB  &mt LG(LALT) SPACE     &kp RETURN  &kp DELETE
            >;
        };

        sym_layer {
            bindings = <
   &kp SQT  &kp GRAVE   &kp STAR      &kp AMPS  &kp MINUS         &kp J                &kp NUMBER_7              &kp NUMBER_8            &kp NUMBER_9      &trans
   &kp DQT  &kp CARET  &kp PRCNT      &kp DLLR   &kp PLUS         &kp K  &mt RIGHT_CONTROL NUMBER_4  &mt RIGHT_SHIFT NUMBER_5  &mt RIGHT_ALT NUMBER_6  &kp LS(G)
 &kp TILDE   &kp HASH     &kp AT      &kp EXCL   &kp PIPE  &kp NUMBER_0                &kp NUMBER_1              &kp NUMBER_2            &kp NUMBER_3       &kp P
                                  &kp QUESTION  &kp EQUAL        &trans                      &trans
            >;
        };

        num_layer {
            bindings = <
   &bt BT_CLR  &bt BT_SEL 2  &trans  &bootloader  &reset  &reset  &bootloader  &trans  &trans  &trans
 &bt BT_SEL 0  &bt BT_SEL 3  &trans       &trans  &trans  &trans       &trans  &trans  &trans  &trans
 &bt BT_SEL 1  &bt BT_SEL 4  &trans       &trans  &trans  &trans       &trans  &trans  &trans  &trans
                                          &trans  &trans  &trans       &trans
            >;
        };
    };
};
